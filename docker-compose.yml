---

services:
  verba:
    build:
      context: ./
      dockerfile: Dockerfile
      target: production
      # Enable BuildKit for better caching and multi-stage builds
      cache_from:
        - type=gha
        - type=local,src=/tmp/.buildx-cache
      cache_to:
        - type=gha,mode=max
        - type=local,dest=/tmp/.buildx-cache-new,mode=max
      # Build arguments for optimization
      args:
        BUILDKIT_INLINE_CACHE: 1
    ports:
      - "8000:8000"
    environment:
      # PostgreSQL Configuration
      DATABASE_URL: ${DATABASE_URL}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_SSLMODE: ${POSTGRES_SSLMODE}

      # LLM Provider API Keys
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      COHERE_API_KEY: ${COHERE_API_KEY}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}

      # Ollama Configuration
      OLLAMA_URL: http://host.docker.internal:11434
      OLLAMA_MODEL: ${OLLAMA_MODEL}
      OLLAMA_EMBED_MODEL: ${OLLAMA_EMBED_MODEL}

      # Document Processing
      UNSTRUCTURED_API_KEY: ${UNSTRUCTURED_API_KEY}
      UNSTRUCTURED_API_URL: ${UNSTRUCTURED_API_URL}
      FIRECRAWL_API_KEY: ${FIRECRAWL_API_KEY}

      # Development
      GITHUB_TOKEN: ${GITHUB_TOKEN}

    volumes:
      - ./data:/data/
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 10s
    restart: unless-stopped

# Weaviate service removed - migrated to PostgreSQL with pgvector
# For local development, use Railway PostgreSQL or local PostgreSQL instance

# No volumes needed for PostgreSQL - data is managed by Railway or local instance
...